## 代理模式

代理模式（Proxy Pattern），指的是一个类代表另一个类的功能。属于结构型模式。

其实就是为其他对象提供一种代理以控制对这个对象的访问。

> 动态代理的作用非常大，在很多底层框架中都会用得到，比如struts，Spring等都用到了动态代理，它的作用很简单，就是将你要使用的类，重新生成一个子类或本类，这样框架就可以利用这个新生成的类做一些事情，比如在该类的方法前后加一些代码。。
> 这样的话，你想像一下，你是不是不用修改任何已经编写好的代码，只要使用代理就可以灵活的加入任何东西，将来不喜欢了，不用也不会影响原来的代码。

#### 注意事项

1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。

### 概括

**代理模式的基本介绍**

代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。
被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象
代理模式有不同的形式, 主要有三种 静态代理、动态代理 (JDK 代理、接口代理)和 **Cglib** 代理 (可以在内存动态的创建对象，而不需要实现接口， 他是属于动态代理的范畴) 。
代理模式示意图

**对于三种代理类型，注意一点，在代理类中都会调用invoke(object,args)方法，该方法其实就是调用目标类的方法，传入的参数，第一个---object，就是目标类对象。**

> 对于三种模式，就讲下区别点，具体知识点还是实践一下代码好点！

### 静态代理

代理类其实是继承目标类，然后重写目标类的接口方法，然后在该方法内，调用目标类的方接口方法。

### 动态代理-JDK

目标对象必须实现一个接口。

主要使用反射技术。使用到JDK中的代理类Proxy，然后使用newProxyInstance方法。该方法接受三个参数。

~~~java
static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h)
~~~

### 动态代理-Cglib

目标对象可以是一个单独的对象。

使用字节码处理框架哎ASM来转换字节码并生产新的类。
